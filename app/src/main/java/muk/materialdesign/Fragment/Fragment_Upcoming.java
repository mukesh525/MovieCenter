package muk.materialdesign.Fragment;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.AuthFailureError;
import com.android.volley.NetworkError;
import com.android.volley.NoConnectionError;
import com.android.volley.ParseError;
import com.android.volley.ServerError;
import com.android.volley.TimeoutError;
import com.android.volley.VolleyError;
import com.github.ksoichiro.android.observablescrollview.ObservableRecyclerView;
import com.github.ksoichiro.android.observablescrollview.ObservableScrollViewCallbacks;
import com.github.ksoichiro.android.observablescrollview.ScrollState;

import java.util.ArrayList;

import muk.materialdesign.Activity.Detail;
import muk.materialdesign.Adapter.AdapterBoxOffice;
import muk.materialdesign.DataBase.DBMovies;
import muk.materialdesign.Model.Movie;
import muk.materialdesign.R;
import muk.materialdesign.TouchListner.RecyclerItemTouchListner;
import muk.materialdesign.Utils.Conect;
import muk.materialdesign.Utils.L;
import muk.materialdesign.Utils.MovieSorter;
import muk.materialdesign.Utils.MyApplication;
import muk.materialdesign.Utils.SortListener;
import muk.materialdesign.basicsyncadapter.SyncUtils;
import muk.materialdesign.callbacks.MovieItemClickLisner;
import muk.materialdesign.callbacks.UpcomingMoviesLoadedListener;
import muk.materialdesign.task.TaskLoadMovieSearch;
import muk.materialdesign.task.TaskLoadMoviesBoxOffice;
import muk.materialdesign.task.TaskLoadUpcomingMovies;


public class Fragment_Upcoming extends Fragment implements SortListener, UpcomingMoviesLoadedListener, SwipeRefreshLayout.OnRefreshListener, ObservableScrollViewCallbacks {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";
    private SwipeRefreshLayout swipeRefreshLayout;
    //The key used to store arraylist of movie objects to and from parcelable
    private static final String STATE_MOVIES = "state_movies1";
    //the arraylist containing our list of box office his
    private ArrayList<Movie> mListMovies = new ArrayList<>();
    //the adapter responsible for displaying our movies within a RecyclerView
    private AdapterBoxOffice mAdapter;
    //the recyclerview containing showing all our movies
    private RecyclerView mRecyclerMovies;
    //the TextView containing error messages generated by Volley
    private TextView mTextError;
    //the sorter responsible for sorting our movie results based on choice made by the user in the FAB
    private MovieSorter mSorter = new MovieSorter();

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment Fragment_Upcoming.
     */
    // TODO: Rename and change types and number of parameters
    public static Fragment_Upcoming newInstance(String param1, String param2) {
        Fragment_Upcoming fragment = new Fragment_Upcoming();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    public Fragment_Upcoming() {
        // Required empty public constructor
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.fragment__upcoming, container, false);
        mTextError = (TextView) layout.findViewById(R.id.textVolleyError);
      //  mRecyclerMovies = (RecyclerView) layout.findViewById(R.id.listMovieUpcoming);
        ObservableRecyclerView  mRecyclerMovies = (ObservableRecyclerView)layout.findViewById(R.id.listMovieUpcoming);
        swipeRefreshLayout= (SwipeRefreshLayout) layout.findViewById(R.id.SwipeMovieHits);
        swipeRefreshLayout.setOnRefreshListener(this);
        //set the layout manager before trying to display data
        mRecyclerMovies.setLayoutManager(new LinearLayoutManager(getActivity()));
        mRecyclerMovies.setScrollViewCallbacks(this);
        mAdapter = new AdapterBoxOffice(getActivity());
       // mAdapter.setMovieClickedListner(this);
        mRecyclerMovies.setAdapter(mAdapter);

        if (savedInstanceState != null) {
            //if this fragment starts after a rotation or configuration change, load the existing movies from a parcelable
            mListMovies = savedInstanceState.getParcelableArrayList(STATE_MOVIES);
        } else {
            mListMovies = MyApplication.getWritableDatabase().readMovies(DBMovies.UPCOMING);
            //if the database is empty, trigger an AsycnTask to download movie list from the web
            if (mListMovies.isEmpty()) {
                if (Conect.isInternateOn(getActivity()))
                {
                    new TaskLoadUpcomingMovies(this).execute();
                }
              else
                {
                Toast.makeText(getActivity(), "No Internet Connection", Toast.LENGTH_LONG).show();
                }
                L.m("FragmentUpcoming: executing task from fragment");

            }
        }
        mRecyclerMovies.addOnItemTouchListener(new RecyclerItemTouchListner(getActivity(),  mRecyclerMovies, new MovieItemClickLisner() {
            @Override
            public void OnMovieItemClick(View view, int position) {
                Intent i = new Intent(getActivity(), Detail.class);
                Movie movie=mListMovies.get(position);
                i.putExtra("Movie",movie);
                startActivity(i);
            }
        }));


        //update your Adapter to containg the retrieved movies
        mAdapter.setMovies(mListMovies);
        return layout;
    }


    @Override
    public void onSortByName() {
        mSorter.sortMoviesByName(mListMovies);
        mAdapter.notifyDataSetChanged();

    }

    @Override
    public void onSortByDate() {
        mSorter.sortMoviesByDate(mListMovies);
        mAdapter.notifyDataSetChanged();

    }

    @Override
    public void onSortByRating() {
        mSorter.sortMoviesByRating(mListMovies);
        mAdapter.notifyDataSetChanged();
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        //save the movie list to a parcelable prior to rotation or configuration change
        outState.putParcelableArrayList(STATE_MOVIES, mListMovies);
    }

    private void handleVolleyError(VolleyError error) {
        //if any error occurs in the network operations, show the TextView that contains the error message
        mTextError.setVisibility(View.VISIBLE);
        if (error instanceof TimeoutError || error instanceof NoConnectionError) {
            mTextError.setText(R.string.error_timeout);

        } else if (error instanceof AuthFailureError) {
            mTextError.setText(R.string.error_auth_failure);
            //TODO
        } else if (error instanceof ServerError) {
            mTextError.setText(R.string.error_auth_failure);
            //TODO
        } else if (error instanceof NetworkError) {
            mTextError.setText(R.string.error_network);
            //TODO
        } else if (error instanceof ParseError) {
            mTextError.setText(R.string.error_parser);
            //TODO
        }
    }

    @Override
    public void onUpcomingMoviesLoaded(ArrayList<Movie> listMovies) {
        if (swipeRefreshLayout.isRefreshing())
        {
            swipeRefreshLayout.setRefreshing(false);
        }
        if(listMovies!=null &&listMovies.size()>0)
        {
            mAdapter.setMovies(listMovies);
        }

        else
        {
            if (Conect.isInternateOn(getActivity()))
                Toast.makeText(getActivity(),"No Response From Server Try again", Toast.LENGTH_LONG).show();

        }

    }

    @Override
    public void onRefresh() {

        if (Conect.isInternateOn(getActivity())) {
            new TaskLoadUpcomingMovies(this).execute();
        }
        else
        {
            if (swipeRefreshLayout.isRefreshing())
            {
                swipeRefreshLayout.setRefreshing(false);
            }
            Toast.makeText(getActivity(), "No Internet Connection", Toast.LENGTH_LONG).show();
        }

    }


    @Override
    public void onScrollChanged(int i, boolean b, boolean b1) {

    }

    @Override
    public void onDownMotionEvent() {

    }

    @Override
    public void onUpOrCancelMotionEvent(ScrollState scrollState) {
        ActionBar ab = ((ActionBarActivity)getActivity()).getSupportActionBar();
        if (scrollState == ScrollState.UP) {
            if (ab.isShowing()) {
                ab.hide();
            }
        } else if (scrollState == ScrollState.DOWN) {
            if (!ab.isShowing()) {
                ab.show();
            }
        }
    }

  /*  @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);

        // Create account, if needed
        SyncUtils.CreateSyncAccount(activity);
    }
*/}
